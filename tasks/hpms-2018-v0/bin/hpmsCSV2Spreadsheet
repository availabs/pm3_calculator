#!/usr/bin/env node

/* eslint no-console:0, no-plusplus: 0 */

if (process.stdout.isTTY) {
  console.error(
    'ERROR: Must redirect the output of this script to a .xlsx file.'
  );
  process.exit(1);
}

const csv = require('fast-csv');
const xl = require('excel4node');

const options = {
  objectMode: true,
  headers: true,
  ignoreEmpty: true,
  discardUnmappedColumns: true,
  trim: true
};

const wb = new xl.Workbook();

const ws1 = wb.addWorksheet('PM3 TMC-Level');
const ws2 = wb.addWorksheet('PM3 Geography-Level');

const STR = 'string';
const NUM = 'number';

const tmcLevelColsTypes = new Map([
  ['Year_Record', NUM],
  ['State_Code', NUM],
  ['Travel_Time_Code', STR],
  ['F_System', NUM],
  ['Urban_Code', NUM],
  ['Facility_Type', NUM],
  ['NHS', NUM],
  ['Segment_Length', NUM],
  ['Directionality', NUM],
  ['DIR_AADT', NUM],
  ['LOTTR_AMP', NUM],
  ['TT_AMP50PCT', NUM],
  ['TT_AMP80PCT', NUM],
  ['LOTTR_MIDD', NUM],
  ['TT_MIDD50PCT', NUM],
  ['TT_MIDD80PCT', NUM],
  ['LOTTR_PMP', NUM],
  ['TT_PMP50PCT', NUM],
  ['TT_PMP80PCT', NUM],
  ['LOTTR_WE', NUM],
  ['TT_WE50PCT', NUM],
  ['TT_WE80PCT', NUM],
  ['TTTR_AMP', NUM],
  ['TTT_AMP50PCT', NUM],
  ['TTT_AMP95PCT', NUM],
  ['TTTR_MIDD', NUM],
  ['TTT_MIDD50PCT', NUM],
  ['TTT_MIDD95PCT', NUM],
  ['TTTR_PMP', NUM],
  ['TTT_PMP50PCT', NUM],
  ['TTT_PMP95PCT', NUM],
  ['TTTR_WE', NUM],
  ['TTT_WE50PCT', NUM],
  ['TTT_WE95PCT', NUM],
  ['TTTR_OVN', NUM],
  ['TTT_OVN50PCT', NUM],
  ['TTT_OVN95PCT', NUM],
  ['PHED', NUM],
  ['OCC_FAC', NUM],
  ['METRIC_SOURCE', NUM],
  ['COMMENTS', STR]
]);

const tmcLevelCols = [...tmcLevelColsTypes.keys()];

let ws1CurRow = 1;

tmcLevelCols.forEach((col, i) => ws1.cell(ws1CurRow, i + 1).string(col));

ws1CurRow += 1;

const warnedCols = new Set();

const stateCodes = new Set();
const countyCodes = new Set();
const mpoCodes = new Set();
const uaCodes = new Set();

const collectInputData = data => {
  stateCodes.add(+data.State_Code);
  countyCodes.add(+data.County_Code);
  mpoCodes.add(+data.MPO_Code);
  uaCodes.add(+data.Urban_Code);

  tmcLevelCols.forEach((col, i) => {
    const colType = tmcLevelColsTypes.get(col);

    if (colType === NUM) {
      const val = +data[col];
      ws1.cell(ws1CurRow, i + 1).number(Number.isFinite(val) ? val : null);
    } else if (colType === STR) {
      const val = data[col] || '';
      ws1.cell(ws1CurRow, i + 1).string(val);
    } else if (!warnedCols.has(col)) {
      console.error(`WARNING: Unrecognized Column ${col}`);
      warnedCols.add(col);
    }
  });

  ++ws1CurRow;
};

const doAggregations = () => {
  let ws2CurRow = 1;
  ws2.cell(ws2CurRow, 1).string('geocode');
  ws2.cell(ws2CurRow, 2).string('geolevel');

  ++ws2CurRow;

  [...stateCodes].filter(c => c).forEach(c => {
    ws2.cell(ws2CurRow, 1).string(`${c}`);
    ws2.cell(ws2CurRow, 2).string('STATE');
    ++ws2CurRow;
  });

  [...countyCodes].filter(c => c).forEach(c => {
    ws2.cell(ws2CurRow, 1).string(`${c}`);
    ws2.cell(ws2CurRow, 2).string('COUNTY');
    ++ws2CurRow;
  });

  [...uaCodes].filter(c => c).forEach(c => {
    ws2.cell(ws2CurRow, 1).string(`${c}`);
    ws2.cell(ws2CurRow, 2).string('UA');
    ++ws2CurRow;
  });

  [...mpoCodes].filter(c => c).forEach(c => {
    ws2.cell(ws2CurRow, 1).string(`${c}`);
    ws2.cell(ws2CurRow, 2).string('MPO');
    ++ws2CurRow;
  });

  wb.writeToBuffer().then(buffer => {
    process.stdout.write(buffer);
  });
};

const csvStream = csv(options)
  .on('data', collectInputData)
  .on('end', doAggregations);

process.stdin.pipe(csvStream);
