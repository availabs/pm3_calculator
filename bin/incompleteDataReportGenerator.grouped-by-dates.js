#!/usr/bin/env node

/* eslint no-console: 0, camelcase: 0, no-shadow: 0, no-plusplus: 0 */

// Reads the data_gaps_log.ndjson file
//   generated by bin/npmrdsMonthDownloadCompletenessChecker.js
//   and generates a human-readable report.

const { split, through } = require('event-stream');

const makeJSONHumanReadable = () => {
  const collector = {};
  return through(
    line => {
      if (!line) {
        return;
      }
      try {
        const { tmc_code, data_gaps } = JSON.parse(line);
        
        for (let i = 0; i < data_gaps.length; ++i) {
          const { start, end } = data_gaps[i]
          collector[start] = collector[start] || {}
          collector[start][end] = collector[start][end] || new Set()
          collector[start][end].add(tmc_code)
        }
      } catch (err) {
        console.error(err);
      }
    },

    function end() {
      const startDates = Object.keys(collector).sort()

      for (let i = 0; i < startDates.length; ++i) {
        if (i) {
          console.log()
        }

        const start = startDates[i]
        const endDates = Object.keys(collector[start]).sort()

        for (let j = 0; j < endDates.length; ++j) {
          const end = endDates[j]

          console.log('start ', start)
          console.log('end   ', end)

          const tmcs = [...collector[start][end]].sort()

          for (let k = 0; k < tmcs.length; ++k) {
            const n = `  ${k+1}`.slice(-3)
            if (!k) {
              console.log(`tmcs ${n}. ${tmcs[k]}`)
            } else {
              console.log(`     ${n}. ${tmcs[k]}`)
            }
          }
        }
      }

      this.emit('end');
    }
  );
};

process.stdin
  .pipe(split())
  .pipe(makeJSONHumanReadable())
  .pipe(process.stdout);
